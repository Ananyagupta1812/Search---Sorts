#include <iostream.
#include <vector>
#include <stack>
using namespace std; 

void printAdjacencyMatrix (int adjMatrix[][5], int n) { 
  cout << "Adjacency Matrix:" << endl; 
  for (int i = 0; i < n; i++) { 
    for (int j = 0; j < n; j++) {
       cout << adjMatrix[i][j] << " "; 
    } 
    cout << endl; 
  } 
}
void DFS (int startNode, int adjMatrix[][5], int n) {
  bool visited[n]; 
  for (int i = 0; i < n; i++) { 
    visited[i] = false 
  } 
  stack <int> s; 
  visited[startNode] = true; s.push(startNode); 
  cout << "Nodes reachable from node " << startNode << " using DFS: "; 

  while (!s.empty()) { 
    int currentNode = s.top(); 
    s.pop();
    cout << currentNode << " "; 
    for (int i = 0; i < n; i++) { 
      if (adjMatrix[currentNode][i] == 1 && !visited[i]) { 
      visited[i] = true; s.push(i); 
      } 
    }
  } 
} 

int main() { 
  int n = 5;  
  int adjMatrix[5][5] = {
  	{0, 1, 1, 0, 0},
    {0, 0, 1, 1, 0}, 
    {0, 0, 0, 1, 1}, 
    {0, 1, 0, 0, 1}, 
    {0, 1, 0, 1, 0}
  }; 
  printAdjacencyMatrix(adjMatrix, n); 
  
  int startNode; 
  cout << "Enter the starting node (0 to 4): ";
  cin >> startNode;
  DFS(startNode, adjMatrix, n); 
  return 0; 
}
