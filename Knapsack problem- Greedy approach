#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

struct Item {
    int value, weight;
    double ratio;
};

// Comparator for sorting items based on value-to-weight ratio
bool compare(Item a, Item b) {
    return a.ratio > b.ratio;
}

void fractionalKnapsack(int n, int W, vector<Item>& items) {
    for (auto& item : items) {
        item.ratio = (double)item.value / item.weight;
    }
    sort(items.begin(), items.end(), compare);

    double maxValue = 0;
    for (auto& item : items) {
        if (W >= item.weight) {
            maxValue += item.value;
            W -= item.weight;
        } else {
            maxValue += W * item.ratio;
            break;
        }
    }
    cout << "Maximum value in knapsack = " << maxValue << endl;
}

int main() {
    int n, W;
    cout << "Enter number of items: ";
    cin >> n;
    cout << "Enter capacity of knapsack: ";
    cin >> W;

    vector<Item> items(n);
    cout << "Enter value and weight of each item:\n";
    for (int i = 0; i < n; i++) {
        cin >> items[i].value >> items[i].weight;
    }

    fractionalKnapsack(n, W, items);
    return 0;
}
