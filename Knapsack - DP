#include <iostream>
using namespace std;

int knapsackDP(int n, int W, int values[], int weights[]) {
    int dp[n + 1][W + 1]; // 2D array to store the DP table

    // Initialize DP table with 0
    for (int i = 0; i <= n; i++) {
        for (int w = 0; w <= W; w++) {
            if (i == 0 || w == 0) {
                dp[i][w] = 0;
            } else if (weights[i - 1] <= w) {
                dp[i][w] = max(dp[i - 1][w], values[i - 1] + dp[i - 1][w - weights[i - 1]]);
            } else {
                dp[i][w] = dp[i - 1][w];
            }
        }
    }

    return dp[n][W];
}

int main() {
    int n, W;

    cout << "Enter number of items: ";
    cin >> n;

    cout << "Enter capacity of knapsack: ";
    cin >> W;

    int values[n], weights[n];

    cout << "Enter value and weight of each item:\n";
    for (int i = 0; i < n; i++) {
        cin >> values[i] >> weights[i];
    }

    int maxValue = knapsackDP(n, W, values, weights);
    cout << "Maximum value in knapsack = " << maxValue << endl;

    return 0;
}
